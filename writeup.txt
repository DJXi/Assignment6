
Write up for assignment 6 from Ricardo(Dingjie) Xi

(1). Operation to count: if (java.lang.Math.abs(dubs[i] - d) < eps) {
                           return true;
                         } 
     Input of model:double[] dubs
     Worst Case Scenario: There is no such element in the array or such element is in the last of the array,
                          then the program needs to traverse the whole array
     model T: T(n) = n
     Big O notation: O(n), where c = 1, x0 = 1.
     
(2). Operation to count:       return x % m;                            
                               return FastModExp.fastModExp(x * x % m, y / 2, m);
                               return ((x * FastModExp.fastModExp(x, y - 1, m)) % m);
     Recurrence Relation: T(n) =  1 + T(n/2)
                          T(n/2) = 1 + T(n/4)
                                   .
                                   .
                                   .
                                   .
                                   .
                          T(1) = 1 + T(0)
                          T(0) = 1
                          T(n) = logn + 1(log with a base 2)
     Big O notation: O(logn), where c = 1, x0 = 1.  
     
(3). Operation to count:   ret[i] = new IntPair(arr[i / 3], arr[i % 3]);
     Input of model: int[] arr
     model T: T(n) = 3*n*n
     Big O notation: O(n^2), where c = 3, x0 = 1.

(4). Operation to count: str += arr[i / length];
     Input of model:String[] arr
     Big O notation: O(n^2), where c = 1, x0 = 1.
     This is because the loop will totoally access the arr by the square of the length of the array times.
     If concatenation of strings of length n and length m takes O(n+m), the the time complexity greatly depend on the length of string         
     we concatenate first. The time complexity would be roughly O(n^4/2).(But it will be smaller during runtime)
     
(5).     
    Operation to count:
    while ((i < length1) && (j < length2)) {
      arr[i + j] = arr1[i++];
      arr[i + j] = arr2[j++];
    } // while
    while (i < length1) {
      arr[i + j] = arr1[i++];
    } // while
    while (j < length2) {
      arr[i + j] = arr2[j++];
    } // while
    Input of model:int[] arr1, int[] arr2
    Big O notation: O(n), where c = 4, x0 = 2.
    It is O(n) because in the end, the loop will go exactly arr1.length + arr2.length times.
    Space complexity: O(n)
    It is O(n) because we create a new array with length (arr1.length + arr2.length).
    And we can conclude that if we know the time complexity bound, the space complexity must be bounded to that.
    However, if we know the space complexity, we are not sure about the time complexity.
